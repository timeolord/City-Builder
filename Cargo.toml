[package]
name = "city-builder"
version = "0.1.0"
edition = "2021"

[profile.release]
debug = true
# lto = "thin"

# [profile.dev.package."*"]
# opt-level = 3

[profile.dev]
opt-level = 3

[target.'cfg(unix)'.dependencies]
coz = "0.1.3"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
array2d = { version = "0.3.0", features = ["serde"] }
# bevy_mod_raycast = "0.16.0"
enum-map = "2.7.2"
image = "0.24.7"
itertools = "0.12.0"
noise = "0.8.2"
num-traits = "0.2.17"
rand = "0.8.5"
rayon = "1.8.0"
smooth-bevy-cameras = "0.11.0"
strict-num = "0.1.1"
strum = "0.25.0"
strum_macros = "0.25.0"
wave-function-collapse = "0.2.0"
float_eq = "1.0.1"
fnv = "1.0.7"
ordered-float = "4.2.0"
bevy_egui = "0.25.0"
futures-lite = "2.2.0"
rand_distr = "0.4.3"
memoize = "0.4.2"
fast-math = "0.1.1"
serde = "1.0.196"
ron = "0.8.1"
egui_file = "0.16.2"
bevy_mod_debugdump = "0.10"
num = "0.4.1"

[dependencies.bevy]
version = "0.13"
default-features = false
features = [
  # These are the default features:
  # (re-enable whichever you like)

  # Bevy functionality:
  "multi-threaded", # Run with multithreading
  "bevy_asset",     # Assets management
  "bevy_audio",     # Builtin audio
  "bevy_gilrs",     # Gamepad input support
  #"bevy_scene",         # Scenes management
  "bevy_winit",         # Window management (cross-platform Winit backend)
  "bevy_render",        # Rendering framework core
  "bevy_core_pipeline", # Common rendering abstractions
  "bevy_gizmos",        # Support drawing debug lines and shapes
  #"bevy_sprite",        # 2D (sprites) rendering
  "bevy_pbr",         # 3D (physically-based) rendering
  "bevy_gltf",        # GLTF 3D assets format support
  "bevy_text",        # Text/font rendering
  "bevy_ui",          # UI toolkit
  "animation",        # Animation support
  "tonemapping_luts", # Support different camera Tonemapping modes (enables KTX2+zstd)
  "default_font",     # Embed a minimal default font for text/UI

  # File formats:
  "png",    # PNG image format for simple 2D images
  "hdr",    # HDR images
  "ktx2",   # Preferred format for GPU textures
  "zstd",   # ZSTD compression support in KTX2 files
  "vorbis", # Audio: OGG Vorbis

  # Platform-specific:
  "x11",                   # Linux: Support X11 windowing system
  "android_shared_stdcxx", # Android: use shared C++ library
  "webgl2",                # Web: use WebGL2 instead of WebGPU

  # These are other (non-default) features that may be of interest:
  # (add any of these that you need)

  # Bevy functionality:
  #"asset_processor",      # Asset processing
  #"file_watcher",         # Asset hot-reloading
  #"subpixel_glyph_atlas", # Subpixel antialiasing for text/fonts
  "serialize", # Support for `serde` Serialize/Deserialize
  #"async-io",             # Make bevy use `async-io` instead of `futures-lite`
  #"pbr_transmission_textures", # Enable Transmission textures in PBR materials
  # (may cause issues on old/lowend GPUs)

  # File formats:
  #"dds",  # Alternative DirectX format for GPU textures, instead of KTX2
  #"jpeg", # JPEG lossy format for 2D photos
  #"webp", # WebP image format
  #"bmp",  # Uncompressed BMP image format
  #"tga",  # Truevision Targa image format
  #"exr",  # OpenEXR advanced image format
  #"pnm",  # PNM (pam, pbm, pgm, ppm) image format
  #"basis-universal", # Basis Universal GPU texture compression format
  #"zlib", # zlib compression support in KTX2 files
  #"flac", # Audio: FLAC lossless format
  #"mp3",  # Audio: MP3 format (not recommended)
  #"wav",  # Audio: Uncompressed WAV
  #"symphonia-all", # All Audio formats supported by the Symphonia library
  #"shader_format_glsl", # GLSL shader support
  #"shader_format_spirv", # SPIR-V shader support

  # Platform-specific:
  #"wayland",              # (Linux) Support Wayland windowing system
  #"accesskit_unix",       # (Unix-like) AccessKit integration for UI Accessibility
  #"bevy_dynamic_plugin",  # (Desktop) support for loading of `DynamicPlugin`s

  # Development/Debug features:
  #"dynamic_linking",   # Dynamic linking for faster compile-times
  #"trace",             # Enable tracing for performance measurement
  #"detailed_trace",    # Make traces more verbose
  #"trace_tracy",       # Tracing using `tracy`
  #"trace_tracy_memory", # + memory profiling
  #"trace_chrome",      # Tracing using the Chrome format
  #"wgpu_trace",        # WGPU/rendering tracing
  "debug_glam_assert", # Assertions to validate math (glam) usage
  #"embedded_watcher",  # Hot-reloading for Bevy's internal/builtin assets
]

[dependencies.uuid]
version = "1.7.0"
features = [
    "v4",                # Lets you generate random UUIDs
    "fast-rng",          # Use a faster (but still sufficiently random) RNG
    "macro-diagnostics", # Enable better diagnostics for compile-time UUIDs
]
